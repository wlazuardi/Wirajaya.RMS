using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WirajayaRMS.Business.Entities;
using WirajayaRMS.DataAccess.Components;
using System.Net.Mail;
using System.Net;
using WirajayaRMS.CrossCutting.OptManagement;
using System.IO;

namespace WirajayaRMS.Business.ApplicationFacade
{
    public class RecruitmentSystem
    {
        public List<RecruitmentData> GetRecruitmentList(int kdDivisi)
        {
            try
            {
                return new RecruitmentDB().GetRecruitmentList(kdDivisi);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public string AddNewRequest(RecruitmentData recruitmentData)
        {
            try
            {
                return new RecruitmentDB().AddNewRequest(recruitmentData);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public RecruitmentData GetRecruitmentData(string noRequest)
        {
            try
            {
                return new RecruitmentDB().GetRecruitmentData(noRequest);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public List<JobDescData> GetRecruitmentJobDescList(string noRequest)
        {
            try
            {
                return new RecruitmentDB().GetRecruitmentJobDescList(noRequest);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public List<QualificationData> GetRecruitmentQualification(string noRequest)
        {
            try
            {
                return new RecruitmentDB().GetRecruitmentQualificationList(noRequest);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public int DeleteRecruitment(string noRequest)
        {
            try
            {
                return new RecruitmentDB().DeleteRecruitment(noRequest);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public string UpdateRequest(RecruitmentData recruitmentData)
        {
            try
            {
                return new RecruitmentDB().UpdateRequest(recruitmentData);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public LevelApprovalData GetNextLevelApproval(int kdDivisi, string currLevelApproval)
        {
            try
            {
                return new RecruitmentDB().GetNextLevelApproval(kdDivisi, currLevelApproval);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        //public int ProcessRequest(RecruitmentData recruitmentData)
        //{
        //    try
        //    {
        //        int result = 0;

        //        if (recruitmentData.NoRequest != "" && recruitmentData.NoRequest != null)
        //        {
        //            result = UpdateRequest(recruitmentData);
        //        }
        //        else
        //        {
        //            result = AddNewRequest(recruitmentData);
        //        }

        //        return result;
        //    }
        //    catch (Exception ex)
        //    {

        //        throw ex;
        //    }
        //}

        public RecruitmentApprovalData GetRecruitmentApprovalComment(string noRequest, int kdUser, string kdLevelApproval)
        {
            try
            {
                return new RecruitmentDB().GetRecruitmentApprovalComment(noRequest, kdUser, kdLevelApproval);
            }
            catch (Exception ex)
            {
                
                throw ex;
            }
        }

        public List<RecruitmentApprovalData> GetRequestApprovalHistory(string noRequest)
        {
            try
            {
                return new RecruitmentDB().GetRequestApprovalHistory(noRequest);
            }
            catch (Exception ex)
            {
                
                throw ex;
            }
        }

        public int AddRecruitmentKandidat(KandidatData dataKandidat)
        {
            try
            {
                return new RecruitmentDB().AddRecruitmentKandidat(dataKandidat);
            }
            catch (Exception ex)
            {
                
                throw ex;
            }
        }

        public List<KandidatData> GetRecruitmentKandidatList(string noRequest)
        {
            try
            {
                List<KandidatData> _listKandidat = new RecruitmentDB().GetRecruitmentKandidatList(noRequest);
                foreach(KandidatData _kandidatData in _listKandidat)
                {
                    _kandidatData.CVFiles = new FileDB().GetKandidatCVList(_kandidatData.KdKandidat);
                }
                return _listKandidat;
            }
            catch (Exception)
            {
                
                throw;
            }
        }

        public List<RecruitmentData> GetRecruitmentListOnHold(int kdUser, int kdDivisi, int kdSO, int kdJabatan)
        {
            try 
	        {
                return new RecruitmentDB().GetRecruitmentListOnHold(kdUser, kdDivisi, kdSO, kdJabatan);
	        }
	        catch (Exception)
	        {
        		
		        throw;
	        }
        }

        public List<RecruitmentData> GetRecruitmentHistoryList(int kdUser, int kdDivisi, int kdSO, int kdJabatan)
        {
            try
            {
                return new RecruitmentDB().GetRecruitmentHistoryList(kdUser, kdDivisi, kdSO, kdJabatan);
            }
            catch (Exception)
            {
                
                throw;
            }
        }

        public int UpdateKandidatSelection(int kdKandidat, string noRequest, bool isSelected)
        {
            try
            {
                return new RecruitmentDB().UpdateKandidatSelected(kdKandidat, noRequest, isSelected);
            }
            catch (Exception ex)
            {
                
                throw ex;
            }
        }

        public int DeleteRecruitmentKandidat(int kdKandidat, string noRequest)
        {
            try
            {
                return new RecruitmentDB().DeleteRecruitmentKandidat(kdKandidat, noRequest);
            }
            catch (Exception ex)
            {
                
                throw ex;
            }
        }

        public int AddRecruitmentKandidatFromExistingList(List<KandidatData> listSelectedKandidat)
        {
            try
            {
                return new RecruitmentDB().AddRecruitmentKandidatFromExistingList(listSelectedKandidat);
            }
            catch (Exception ex)
            {
                
                throw ex;
            }
        }

        public int DeleteKandidatFromRequest(int kdKandidat, string noRequest)
        {
            try
            {
                return new RecruitmentDB().DeleteKandidatFromRequest(kdKandidat, noRequest);
            }
            catch (Exception ex)
            {
                
                throw ex;
            }
        }

        public int NotifyNextPIC(RecruitmentData recruitmentData, string template, int kdUserCreator)
        {
            try
            {
                List<UserData> _listPIC = new RecruitmentDB().GetNextPICList(recruitmentData.KdDivisi, recruitmentData.StrukturOrganisasi.KdSO, recruitmentData.CurrLevelApproval);

                DivisiData _divisiData = new DivisiDB().GetDivisiData(recruitmentData.KdDivisi);
                StrukturOrganisasiData _soData = new StrukturOrganisasiDB().GetStrukturOrganisasiData(recruitmentData.KdDivisi, recruitmentData.StrukturOrganisasi.KdSO);
                JabatanData _jabatanData = new JabatanDB().GetJabatanData(recruitmentData.KdDivisi, recruitmentData.Jabatan.KdJabatan);
                LevelApprovalData _lvApprovalData = new LevelApprovalSystem().GetLevelApprovalData(recruitmentData.KdDivisi, recruitmentData.CurrLevelApproval);

                template = template.Replace("#NoRequest#", recruitmentData.NoRequest)
                    .Replace("#Divisi#", _divisiData.NmDivisi)
                    .Replace("#SO#", _soData.ParentNmStrukturOrganisasi + " - " + _soData.NmStrukturOrganisasi)
                    .Replace("#Jabatan#", _jabatanData.NmJabatan)
                    .Replace("#JumlahKaryawan#", recruitmentData.JmlOrang.ToString())
                    .Replace("#TglDiperlukan#", recruitmentData.TglButuh.ToString("dd MMM yyyy"))
                    .Replace("#Alasan#", recruitmentData.KdAlasan == 1 ? "Penambahan Karyawan" : "Penggantian Karyawan")
                    .Replace("#Status#", _lvApprovalData.StatusDokumen)
                    .Replace("#FollowUpURL#", SystemConfiguration.WebDomainName);
                
                // Send email & notification to each PIC
                foreach (UserData _picData in _listPIC)
                {
                    string body = template;
                    body = body.Replace("#NamaPIC#", _picData.FullName);

                    MailMessage mail = new MailMessage();
                    mail.From = new MailAddress(SystemConfiguration.NotificationEmailUsername, "Wirajaya Recruitment Management System");
                    mail.To.Add(new MailAddress(_picData.Email));
                    SmtpClient client = new SmtpClient();
                    client.Port = 587;
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    client.EnableSsl = true;
                    client.UseDefaultCredentials = false;
                    client.Credentials = new NetworkCredential(SystemConfiguration.NotificationEmailUsername, SystemConfiguration.NotificationEmailPassword);
                    client.Host = SystemConfiguration.SMTPHost;
                    mail.Subject = "[No-Reply] Notifikasi Permohonan Rekrutmen";
                    mail.SubjectEncoding = Encoding.UTF8;
                    mail.IsBodyHtml = true;
                    mail.BodyEncoding = Encoding.UTF8;
                    mail.Body = body;                    
                    client.Send(mail);

                    NotificationData _notificationData = new NotificationData();
                    _notificationData.KdUser = _picData.KdUser;
                    _notificationData.Message = "<h4>Request baru</h4>" + _jabatanData.NmJabatan + " - " + _soData.NmStrukturOrganisasi + " (" + _divisiData.NmDivisi + ")";
                    _notificationData.Argument = recruitmentData.NoRequest;
                    _notificationData.IsRead = false;
                    _notificationData.KdTipe = 1;
                    _notificationData.Creator.KdUser = kdUserCreator;

                    int result = new NotificationSystem().AddNotification(_notificationData);                    
                }

                return 1;
            }
            catch (Exception ex)
            {
                return 0;
                throw ex;
            }
        }
    }
}
